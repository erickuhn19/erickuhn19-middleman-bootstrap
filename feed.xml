<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-01-01T19:00:00-05:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>The not so obvious problem for iOS developers</title>
    <link rel="alternate" href="http://blog.url.com/The-not-so-obvious-problem-for-iOS-developers/"/>
    <id>http://blog.url.com/The-not-so-obvious-problem-for-iOS-developers/</id>
    <published>2016-01-01T19:00:00-05:00</published>
    <updated>2016-01-02T12:07:38-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Recently my new company provided me with an 16GB iPhone 6S. I did everything in my power to circumvent this model, as I was using a iPhone 6 with 64GB at a 70% capacity. Switching to the 16GB seemed unfathomable. Since two iPhones in my pocket was not going to be an option, I told myself I would make this work. First, I needed to make some ground rules or this was going to be a disaster.&lt;/p&gt;

&lt;p&gt;I started with creating a new phone and not installing my iCloud back up. I had 244 non-Apple apps on my phone and knew I needed to narrow this down. Only my most used apps were going to make the cut. This was a herculean challenge but a good exercise to think about what I was receiving the most value from. As of this writing I only downloaded 40 but I feel like I cut too many corners. One thing I had going for me is I don’t use any music on my phone since I use Spotify.&lt;/p&gt;

&lt;p&gt;The most glaring problem I have with this new set up is my new trepidation to try out new apps. Is this a problem other people think about? In the past I would try out apps on a whim and keep them around even if it’s a one time use case. Now my new world view is drastically different because of the limited space. This makes me uncomfortable since I ‘m a Product Manager in the mobile space. Testing a large number of apps is part of the job description.&lt;/p&gt;

&lt;p&gt;Now that I’ve given my personal account how this phone affects me. Let’s think about it in a broader context and what are the ripple effects for the ecosystem.&lt;/p&gt;

&lt;p&gt;So I’ve read all the reports about the amount of apps the average person uses per day &lt;a href="http://techcrunch.com/2015/06/22/consumers-spend-85-of-time-on-smartphones-in-apps-but-only-5-apps-see-heavy-use/#.vyo3cp:5bJy"&gt;(5)&lt;/a&gt; and how many she will keep on her phone &lt;a href="http://mashable.com/2013/09/05/most-apps-download-countries/"&gt;(25)&lt;/a&gt;, but that is just data. The important question is why are people limiting their app consumption. Is it a personal preference or a choice they’re forced to make? This distinction is important as the app ecosystem’s vibrancy of new apps depends on it.&lt;/p&gt;

&lt;p&gt;Let’s run with the idea that the vast majority of people own a 16GB iPhone. This is a safe assumption thanks to some data from the UK that says &lt;a href="http://www.businessinsider.com/iphone-storage-data-market-share-2014-12?r=UK&amp;amp;IR=T"&gt;91% of Telefonica users have the 16GB model.&lt;/a&gt;
Let’s make another assumption and say the majority of those people run into a shortage of space on a frequent basis. If this is the case, then the obvious statement is Apple is not giving the user the best experience. The less obvious statement. App developers are experiencing a constraint in growth outside of their control.&lt;/p&gt;

&lt;p&gt;Yes, Apple launched app thinning and reduced the size of OS updates. But that won’t solve the problem overnight. A simple thought experiment. If someone needed to choose between photos of their loved ones and the newest app. Which would they choose? The problem for app developers is, why do they have to?&lt;/p&gt;

&lt;p&gt;This is an important observation as we increasingly rely on software to make improvements in our lives. As a Product Manager, it is more important than ever to bring real value to your users. Your not only competing for the user’s time and attention. You are competing for space on their phone.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Going Mobile</title>
    <link rel="alternate" href="http://blog.url.com/going-mobile/"/>
    <id>http://blog.url.com/going-mobile/</id>
    <published>2015-09-17T20:00:00-04:00</published>
    <updated>2015-09-18T16:12:03-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I started my programming journey almost a year ago and I’ve recently had a change in philosophy. I’ve decided to exclusively develop iOS apps using the new Swift language Apple debuted last year. This decision did not come lightly. Many conversations, read blog posts and internal pondering if this would be the right move took place before I came to the decision to invest my limited time in learning iOS development.&lt;/p&gt;

&lt;p&gt;After extensive thought on this subject, I’ve dove in head first to learn as fast as I possibly can. My knowledge of web apps and understanding of Object Oriented Programming Languages such as Ruby have been extremely useful in learning Swift concepts. Xcode and the entire development process of iOS is so different, but the more I learn the more my own personal experiences with apps is helping me further my understanding. This is truly an exciting time.&lt;/p&gt;

&lt;p&gt;So, why did I come to this conclusion? My wife originally planted the idea in my head when I first started to learn to code. It was a profound yet simple argument. The vast majority of the time she is on her phone, and the majority of that time is spent in apps, so why don’t you learn how to build these? I’m paraphrasing but when I think about it, it’s also the case for my own behavior. I spend the majority of my time in apps and I’m generally most excited about the possibility of what native apps have the capability of doing.&lt;/p&gt;

&lt;p&gt;At the time I shrugged this off because I was in the infancy of my coding journey and the majority of the resources I found were for the web and Ruby on Rails. Just to be clear, I 100% don’t regret starting with the web. It was essential to understand the fundamental layers of how web frameworks work and this has and will continue to be profound in my iOS development. However, the argument she made began to creep into my mind which became inescapable to my thoughts.&lt;/p&gt;

&lt;p&gt;Now, I could get all &lt;a href="www.ben-evans.com/"&gt;Benedict Evan’s&lt;/a&gt; and quote statistical data on why mobile is taking over the world or as he explains it “The smartphone is the new sun,” but seriously if you haven’t read his work, you should. I’ll leave him to make the technical arguments to why mobile is the most important piece of hardware in the world and to the future.&lt;/p&gt;

&lt;p&gt;The decision became clear. To build solutions that solved my own problems I needed to develop software on the platform I spend the most time.&lt;/p&gt;

&lt;p&gt;As I was writing about my Ruby on Rails coding journey, I will begin to do that for Swift and iOS development. Writing technical blog posts is to help me better understand the concepts I’m learning and has been enormously helpful. It was the sole reason for taking the part-time work at Codecademy as an Advisor. The experience of helping people to fix a bug or point them on the right path is a blog post in itself and I’ve loved the experience so far. I’ll get to that another time. For now, expect to see this blog full of Swift and iOS development post.&lt;/p&gt;

&lt;p&gt;Happy Coding&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Website Redesign in Middleman</title>
    <link rel="alternate" href="http://blog.url.com/Website-Redesign-in-Middleman/"/>
    <id>http://blog.url.com/Website-Redesign-in-Middleman/</id>
    <published>2015-08-01T20:00:00-04:00</published>
    <updated>2015-08-02T14:36:39-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you haven’t noticed but I’ve done an overhaul of my website and blog. I’m not done with making tweaks, honestly I still have a lot to do but I wanted to just ship it and make the changes as I go.&lt;/p&gt;

&lt;p&gt;The site is built on a totally different framework than before. The last site was a blog built with Ruby on Rails. I used my personal blog to test my Rails development skills and it served a useful purpose. It was a simple app that I could maintain to just get into the Rails framework. However, its time has come.&lt;/p&gt;

&lt;p&gt;For a project at work (I’ll get to my new job in a later post) I needed to build a new front end site for the project I’m working on. I’ve conceptually moved away from using Wordpress since I’ve taught myself to code using Ruby on Rails, HTML, CSS, jQuery and the Bootstrap framework. So building a Wordpress site with blog just wasn’t an option for me. I ended up just customizing a Bootstrap theme in pure HTML, CSS and jQuery out of necessity, but I knew this was not sustainable for a larger scale site.&lt;/p&gt;

&lt;p&gt;I found myself coming across Static Site Generators such as Middleman and Jekyll and instantly fell in love with these frameworks. Ok, maybe not in love but I really liked the concept. I realized I didn’t need to build a Rails web app to serve a static site like a marketing site, but the features of Rails such as partials and gems were so appealing. After doing way more research than I would have liked I settled on Middleman, partially because of its connection to Thoughtbot (I’m a big fan).&lt;/p&gt;

&lt;p&gt;I decided that it was time for a change to my personal site and was excited to test out the new framework. Also, I want to have a go-to front end static site generator framework that can serve up my marketing sites with blog for future projects. Did I mention I am serving this site on Github Pages for free? No longer do I need to pay some absurd monthly fee  for specialized managed Wordpress host.&lt;/p&gt;

&lt;p&gt;Anyway, I’m not going to get into the finer details of Middleman in this post. For now I’ll say that I’m very happy I’ve made the switch and will certainly be using it for my future projects, plus I probably need to redesign the original work project as it's continuing to grow in scope and needs a nice framework to develop it efficently.&lt;/p&gt;

&lt;p&gt;My hiatus from writing regularly is officially over.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ruby Basics Intro to RSpec</title>
    <link rel="alternate" href="http://blog.url.com/ruby-basics-intro-to-rspec/"/>
    <id>http://blog.url.com/ruby-basics-intro-to-rspec/</id>
    <published>2015-04-12T20:00:00-04:00</published>
    <updated>2015-07-26T17:51:23-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The last post I touched on classes and in this tutorial we are going to test that class using RSpec. RSpec is described on its &lt;a href="http://rspec.info"&gt;website&lt;/a&gt; as a behavior driven development for ruby. I think thats a pretty accurate description but to break it down even further, RSpec is a framework to test your code. It was built as a domain specific language, which means it’s built in Ruby with its own syntax but its still just Ruby code.&lt;/p&gt;

&lt;p&gt;Now the more you learn about Ruby and the Rails framework, you will see the debate in the community about which testing framework is better, RSpec or MiniTest. The best advice I’ve heard on this issue is as long as your testing, then your going in the right direction. I’ve chosen RSpec, but that doesn't mean you have to.&lt;/p&gt;

&lt;p&gt;Ok, so I’ve expanded the the class of Dog a bit by adding a few methods for playing and resting. To test out my code and practice on your own, create a new file called dog.rb. Tip, you can create a file in your command line like this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
touch dog.rb
sublime dog.rb
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If your using Sublime thats a shortcut you can set up to have the file automatically open up. Going through the Finder directory is no fun. I used this &lt;a href="http://olivierlacan.com/posts/launch-sublime-text-3-from-the-command-line/"&gt;walk through&lt;/a&gt; to set it up.&lt;/p&gt;

&lt;p&gt;Write out this code into your dog.rb file. You can copy and paste it but writing out each line is recommended to understand whats going on.&lt;/p&gt;

&lt;p&gt;```ruby
class Dog
  attr_reader :energy, :name
  def initialize(name, energy=100)
    @name = name.capitalize
    @energy = energy
  end&lt;/p&gt;

&lt;p&gt;def to_s
    "My dogs name is #{@name} and he has #{@energy} % energy! This dog loves to play!"
  end&lt;/p&gt;

&lt;p&gt;def play
    @energy -= 20
    puts "#{@name} just ran around the yard! That dog is so fast!"
  end&lt;/p&gt;

&lt;p&gt;def rest
    @energy += 25
    puts "#{@name} just took a nap. Dogs love to sleep."
  end 
end&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;FILE&lt;/strong&gt; == $0
  dog = Dog.new("Dexter", 110)
  puts dog
  puts dog.energy
  puts dog.play
  puts dog.rest
end
```&lt;/p&gt;

&lt;p&gt;Now we want to test this class using RSpec. As of this writing RSpec version is at 3.2. Start in your command line and run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
gem install rspec
&lt;/code&gt;
To use RSpec create a new file named dog_spec.rb in the same folder you created dog.rb. The spec portion of the name is what RSpec looks for to run your tests. If you’ve forgotten how to create a file from the command line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
touch dog_spec.rb
sublime dog_spec.rb
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we have our class created and we have a blank file to put our tests in, lets get to it. I’m going to give all the code at once, but its extremely helpful to go line by line adding the code into the file so you know what it does.&lt;/p&gt;

&lt;p&gt;```ruby
require_relative 'dog'&lt;/p&gt;

&lt;p&gt;describe Dog do
  before do
    @initial_energy = 100
    @dog = Dog.new("dexter", @initial_energy)
  end&lt;/p&gt;

&lt;p&gt;it "has a capitalized name" do
    expect(@dog.name).to eq("Dexter")
  end&lt;/p&gt;

&lt;p&gt;it "has an initial energy set" do
    expect(@dog.energy).to eq(100)
  end&lt;/p&gt;

&lt;p&gt;it "has a string returned for the object" do
    expect(@dog.to_s).to eq("My dogs name is Dexter and he has 100 % energy! This dog loves to play!")
  end&lt;/p&gt;

&lt;p&gt;it "reduces energy by 20 when a dog plays" do
    @dog.play
    expect(@dog.energy).to eq(@initial_energy - 20)
  end&lt;/p&gt;

&lt;p&gt;it "increases energy by 25 when a dog rests" do
    @dog.rest
    expect(@dog.energy).to eq(@initial_energy +25)
  end&lt;/p&gt;

&lt;p&gt;context "create a dog with default energy" do
    before do
      @dog = Dog.new("dexter")
    end&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it "has a default energy of 100" do
  expect(@dog.energy).to eq(100)
end   end end ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing this RSpec file needs to do is require the file we are testing, the dog.rb file. Then on line 3 we start using the basic structure of the testing framework which is supposed to express concepts like a conversation. I translate this first line into “Please describe the Class of Dog doing these things”.&lt;/p&gt;

&lt;p&gt;The block of code that starts on line 4 runs before each testing scenario that starts with “it”. This “before do” basically creates the environment for us to test a specific use case. Instead of typing out this each time we run a scenario it can automatically run for each test case. This conforms to the DRY principle in programming, or Don’t Repeat Yourself.&lt;/p&gt;

&lt;p&gt;Ok, so test scenario 1 is saying a statement of “it has a capitalized name”. One thing I need to say here, please don't ever call a dog an “it”, that would not be cool! It is referring to the object we are testing and this is the only time where this would be ok. Anyway, keeping the literal translation going I would translate the next line to say “it (the dog) has a capitalized name, do this test, we expect when you call the dog’s name, it will show up as ‘Dexter’ ”. Thats a pretty simple formula to follow, right? The line for “it” states the statement we are trying to test, “expect” is giving the exact parameter we want to see, “.to” wants to see a true value and “eq” is saying the output should equal “Dexter”.&lt;/p&gt;

&lt;p&gt;To actually see this test file run, go back to your command line and you can run any one of the following three commands. Try each one out to see which format you like the best.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
rspec dog_spec.rb
rspec dog_spec.rb —color
rspec dog_spec.rb —color —format doc
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thanks for following along to my simple introduction to RSpec!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ruby Basics Classes, Instance Variables and Initialize</title>
    <link rel="alternate" href="http://blog.url.com/ruby-basics-classes-instance-variables-and-initialize/"/>
    <id>http://blog.url.com/ruby-basics-classes-instance-variables-and-initialize/</id>
    <published>2015-04-10T20:00:00-04:00</published>
    <updated>2015-07-26T17:49:33-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I want to quickly touch on 3 concepts that are super important to the Ruby language. Having an understanding how Classes, Instance Variables and the Initialize method work together will be beneficial in mastering the Ruby programming language.&lt;/p&gt;

&lt;p&gt;To give some context of these three concepts lets define one additional term. A Local Variable is only accessible within the method it’s declared in. Meaning we can not call a local variable outside of the method it was created in. Lets look at an example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
def local_variable
  x = 19
  puts x
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this case x is our local variable and can not be called outside of the local_variable method. To use x we would need to call local_variable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
def to_s
  “My Local Variable is #{local_variable}”
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ok, now we have established what a local variable is lets see what these other concepts are.&lt;/p&gt;

&lt;h3 id="classes"&gt;Classes:&lt;/h3&gt;

&lt;p&gt;The Class in Ruby is like a production line that creates objects that have a unique state and a group of methods to call on those objects. The naming convention for classes always start with an uppercase method or known as CamelCase.&lt;/p&gt;

&lt;h3 id="initialize-method"&gt;Initialize Method:&lt;/h3&gt;

&lt;p&gt;The Initialize Method is part of the Ruby magic. You don't actually call this method on an object, but Ruby calls it for you every time you use the New method for your class to create a new object. An example is coming.&lt;/p&gt;

&lt;h3 id="instance-variable"&gt;Instance Variable:&lt;/h3&gt;

&lt;p&gt;This is why we defined what a Local Variable was earlier. An Instance Variable is how we store an object’s state in a Class. These variables can be used throughout the life of your object, but you need to call them differently. These variables start with the @ symbol. You also define your Instance Variables in the Initialize Method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
class Dog
def initialize(name, energy=100)
  @name = name
  @energy = energy
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
def to_s
  “My dogs name is #{@name} and he has #{@energy} % energy! This dog loves to play!”
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So I just created an example class of Dog. When I want to create a new Dog, I would use the new method for the Dog class which will create a state in my instance variables which I defined in the initialize method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
Dexter = Dog.new(“Dexter”, 110)
puts Dexter
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So using that one line of code I created a class object of Dexter who has two instance variables of @name and @health. When I call “puts Dexter”, the output will be “My dogs name is Dexter and he has 110% energy! This dog loves to play!”&lt;/p&gt;

&lt;p&gt;Take this example and try it for yourself in your text editor! &lt;strong&gt;Or go play with a dog that has lots of energy!&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ruby Basics puts yo self</title>
    <link rel="alternate" href="http://blog.url.com/ruby-basics-puts-yo-self/"/>
    <id>http://blog.url.com/ruby-basics-puts-yo-self/</id>
    <published>2015-04-08T20:00:00-04:00</published>
    <updated>2015-07-26T17:47:14-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As soon as you start to learn the Ruby programming language you hear about this “puts” thing. Puts right away is used and is pretty cool. When you want to “put” something to the screen, you runs puts.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
puts “Eric knows Ruby!”
puts “Hello World”
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Well “puts” is a method if you were wondering. Now that might not make a whole lot of sense since you probably learned that all methods are called on objects. Something like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
name = “eric”
name.upcase
&lt;/code&gt;
My method upcase was called on the object of name. So puts is a method but where is its object?&lt;/p&gt;

&lt;p&gt;Intro to self.&lt;/p&gt;

&lt;p&gt;Anytime there isn't an object referenced on the left hand side, Ruby references a variable called self. Self will always reference the current object. Self is a global object and its value is main. If you run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
self.class
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You get Object. We found out object! Makes sense now?&lt;/p&gt;

&lt;p&gt;Wrap up: “puts” is a method, its called on a object and is stored in self. All methods are called on objects even if you don't see it.&lt;/p&gt;
</content>
  </entry>
</feed>
